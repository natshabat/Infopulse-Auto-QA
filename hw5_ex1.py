# –ó–∞–¥–∞–Ω–∏–µ 1 (–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤)
# –ü–µ—Ä–µ–¥–µ–ª—ã–≤–∞–µ–º (–∞ —á—Ç–æ-—Ç–æ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º) –Ω–∞—à–∏ –∫–ª–∞—Å—Å—ã —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º:
# 1) Person (–¥–≤–∞ —Å–≤–æ–π—Å—Ç–≤–∞: 1. —Ç–µ–ø–µ—Ä—å full_name –ø—É—Å—Ç—å –±—É–¥–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ–º, –∞ –Ω–µ —Ñ—É–Ω–∫—Ü–∏–µ–π (–æ–¥–Ω–æ –ø–æ–ª–µ, –º—ã –æ–∂–∏–¥–∞–µ–º - —Ç–∏–ø —Å—Ç—Ä–æ–∫–∞
# –∏ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤ ¬´–∏–º—è —Ñ–∞–º–∏–ª–∏—è¬ª), –∞ —Å–≤–æ–π—Å—Ç–≤ name –∏ surname –Ω–µ—Ç—É, 2. –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è).
# –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ:
# 	‚Ä¢–≤—ã–¥–µ–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–º—è –∏–∑ full_name
# 	‚Ä¢–≤—ã–¥–µ–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—é –∏–∑ full_name;
# 	‚Ä¢–≤—ã—á–∏—Å–ª—è–µ—Ç —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –±—ã–ª–æ/–µ—Å—Ç—å/–∏—Å–ø–æ–ª–Ω–∏—Ç—Å—è –≤ –≥–æ–¥—É, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º (obj.age_in(year));
# 	–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤ —ç—Ç–æ–º –≥–æ–¥—É;
# * (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ) –ú–æ–∂–µ—Ç–µ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤ full_name –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤,
# –µ—Å–ª–∏ –Ω–µ—Ç, –≤—ã–∑—ã–≤–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ üòä
# * (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ) –ú–æ–∂–µ—Ç–µ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 2020
# (—Ç–µ–∫—É—â–∏–π –≥–æ–¥ ‚Äì –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö), –Ω–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 1900. –ï—Å–ª–∏ –Ω–µ—Ç, –≤—ã–∑—ã–≤–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ


class Person:
    """ The fullname and  birthday of persons"""
    def __init__(self, fullname, birthday):
        self.fullname = fullname
        if len(fullname.split()) != 2:
            raise print('The fullname should consist two words, ValueError')
        self.birthday = birthday
        if not(1900 <= birthday <= 2021):
            raise print("Please,enter the correct birthday, ValueError")
    def name_from_fullname(self):
        ''' –≤—ã–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –∏–∑ full_name '''
        return self.fullname.split()[0]
    def surname_from_fullname(self):
        ''' –≤—ã–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—é –∏–∑ full_name '''
        return self.fullname.split()[-1]
    def age_in_year(self, year = 2021):
        if year is None:
            age = 2021 - self.birthday
        else:
            age = year - self.birthday
        return age


p = Person('Nataliya Shabat', 1990)
print(p.fullname, p.birthday)
print(p.surname_from_fullname(), p.name_from_fullname())
print(p.age_in_year())
print(len(p.fullname.split()))

# 2) Employee (–Ω–∞—Å–ª–µ–¥—É–µ–º—Å—è –æ—Ç Person) (–¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Å–≤–æ–π—Å—Ç–≤–∞: –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã, –∑–∞—Ä–ø–ª–∞—Ç–∞)
# * (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ) –ú–æ–∂–µ—Ç–µ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∏ –∑–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ üòä
# –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã:
# ‚Ä¢–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å –ø—Ä–∏—Å—Ç–∞–≤–∫–æ–π, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã: Junior ‚Äî –º–µ–Ω–µ–µ 3 –ª–µ—Ç, Middle ‚Äî –æ—Ç 3 –¥–æ 6 –ª–µ—Ç,
# Senior ‚Äî –±–æ–ª—å—à–µ 6 –ª–µ—Ç.–¢.–µ. –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å –ø—Ä–∏—Å—Ç–∞–≤–∫–æ–π Junior/Middle/Senior <position>.
# –ï—Å–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É –≤–∞—Å –æ–±—ä–µ–∫—Ç –∏–º–µ–ª –¥–æ–ª–∂–Ω–æ—Å—Ç—å ‚Äúprogrammer‚Äù —Å –æ–ø—ã—Ç–æ–º 2 –≥–æ–¥–∞, –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å ‚ÄúJunior programmer‚Äù
# ‚Ä¢–º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—É –Ω–∞ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø–µ—Ä–µ–¥–∞—ë—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º.
class Employee(Person):
    """ The Persons with their job: position, experience and salary """
    def __init__(self, fullname = '', birthday = '', position= '', experience=0, salary=0):
        Person.__init__(self, fullname, birthday)
        self.position = position
        self.experience = experience
        if experience < 0:
            raise print('The experience should be more then 1 day')
        self.salary = salary
        if salary < 0:
            raise print("The salary should be more then 10")
    def level_position (self):
        """ Definition of position according to experience"""
        if self.experience <= 3:
            return 'Junior ' f'{self.position}'
        elif 3 <= self.experience <= 6:
            return 'Middle ' f'{self.position}'
        else:
            return 'Senior 'f'{self.position}'
    def salary_increasing(self, increasing = 0):
        """ Increasing of salary"""
        return self.salary + increasing

p1 = Employee('Nataliya Lesya', 1989, 'programmer', 9, 100)
print(p1.fullname, p.birthday, p1.experience, p1.salary)
print(p1.level_position())
print(p1.salary_increasing(800))

# 3) ITEmployee (–Ω–∞—Å–ª–µ–¥—É–µ–º—Å—è –æ—Ç Employee)
# 1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞ –≤ –Ω–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ skills (—Å–ø–∏—Å–æ–∫) –Ω–æ–≤—ã–º –º–µ—Ç–æ–¥–æ–º add_skill
# (—Å–º. –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é).
# 2. * –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –≤ –Ω–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ skills (—Å–ø–∏—Å–æ–∫) –Ω–æ–≤—ã–º –º–µ—Ç–æ–¥–æ–º add_skills.
# –¢—É—Ç –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã: –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –æ–¥–∏–Ω –∏ –æ–Ω —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ä–∞—Å—à–∏—Ä—è–µ—Ç–µ —Å–ø–∏—Å–æ–∫-—Å–≤–æ–π—Å—Ç–≤–æ skill,
# –∏–ª–∏ –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∏ –≤—Å–µ –∏—Ö –¥–æ–±–∞–≤–ª—è–µ—Ç–µ –≤ —Å–ø–∏—Å–æ–∫-—Å–≤–æ–π—Å—Ç–≤–æ skill

class ITEmployee(Employee):
    ''''The Employee in IT-area including Person and Employee features '''
    def __init__(self, *args, **kwargs):
        Employee.__init__(self, *args, **kwargs)
        self.skills = []
    def add_skills (self, *new_skill):
        """Adding new skills for ITEmployee"""
        self.skills.append(new_skill)
        return str(self.skills)

p2 = ITEmployee('Nataliya Lesya', 1989, 'programmer', 9, 100)
print(p2.add_skills('python 2,7', 'python 3,9'), p2.level_position(), p2.experience)